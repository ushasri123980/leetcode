


You are given an array nums of non-negative integers. nums is considered special if there exists a number x such that there are exactly x numbers in nums that are greater than or equal to x.

Notice that x does not have to be an element in nums.

Return x if the array is special, otherwise, return -1. It can be proven that if nums is special, the value for x is unique.

 

Example 1:

Input: nums = [3,5]
Output: 2
Explanation: There are 2 values (3 and 5) that are greater than or equal to 2.
Example 2:

Input: nums = [0,0]
Output: -1
Explanation: No numbers fit the criteria for x.
If x = 0, there should be 0 numbers >= x, but there are 2.
If x = 1, there should be 1 number >= x, but there are 0.
If x = 2, there should be 2 numbers >= x, but there are 0.
x cannot be greater since there are only 2 numbers in nums.
Example 3:

Input: nums = [0,4,3,0,4]
Output: 3
Explanation: There are 3 values that are greater than or equal to 3.
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 1000






class Solution {
public:
    int specialArray(vector<int>& nums) {
        /*
		Example
		[0,4,3,0,4]

		*/
        int n = nums.size(), curMax = 0;
        int counter[101]; // counter for counting 1 to 100 (constraint based)
        memset(counter, 0, sizeof(counter));
        
        for(auto n : nums) {
            curMax = max(curMax, n);
            counter[n > 100 ? 100 : n]++; // count all numbers more than 100 in index position
        }
		/*
		Now looks like this for counter array:
		0 2
		3 1
		4 2
		*/
        int cur = 0;
        curMax = (curMax > 100 ? 100 : curMax); //compute the max of the array and start from that number instead of 100
		// curMax is now 4! instead of 100 
        for(int i = curMax; i >= 1; --i) {
            if(counter[i] != 0) cur += counter[i]; // keep a variable and update the current culmulative number
            if(cur == i) return cur;
        }   
		/*
		Complete snapshot of variable cur
		i  | cur
		--------
		0 |   5
		1 |   3
		2 |   3    
		3 |   3 -- found answer!! return 3
		4 |   2
		5 |   0
		*/
        return -1;
    }
};
